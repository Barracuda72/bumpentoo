diff -Naur pyosd-0.2.14.orig/modules/battery.py pyosd-0.2.14/modules/battery.py
--- pyosd-0.2.14.orig/modules/battery.py	2005-08-25 03:05:53.000000000 +0600
+++ pyosd-0.2.14/modules/battery.py	2020-06-27 10:12:59.356719430 +0500
@@ -25,7 +25,7 @@
 STATE_FILE = "state"
 INFO_FILE = "info"
 
-import commands
+import subprocess
 import os
 import re
 import string
diff -Naur pyosd-0.2.14.orig/modules/volume.py pyosd-0.2.14/modules/volume.py
--- pyosd-0.2.14.orig/modules/volume.py	2003-08-10 11:06:29.000000000 +0600
+++ pyosd-0.2.14/modules/volume.py	2020-06-27 10:12:59.410719430 +0500
@@ -13,7 +13,7 @@
 Plugin for PyOSDd which facilitates changing volume
 """
 
-import commands
+import subprocess
 import os
 import re
 
@@ -45,7 +45,7 @@
         signal.signal(signal.SIGCHLD, signal.SIG_DFL)
 
         # read volume in
-        output = commands.getoutput("aumix -q")
+        output = subprocess.getoutput("aumix -q")
         # locate main volume
         m = re.match("vol (\d+),", output)
         vol = int(m.group(1))
diff -Naur pyosd-0.2.14.orig/pyosd/daemon.py pyosd-0.2.14/pyosd/daemon.py
--- pyosd-0.2.14.orig/pyosd/daemon.py	2004-01-26 06:14:01.000000000 +0500
+++ pyosd-0.2.14/pyosd/daemon.py	2020-06-27 10:12:59.523719430 +0500
@@ -60,9 +60,9 @@
     args = []
     kwargs = {'shadow': 0}
 
-    pyosd.daemon.top = apply(pyosd.osd, args, kwargs)
+    pyosd.daemon.top = pyosd.osd(*args, **kwargs)
     pyosd.daemon.top.set_pos(pyosd.POS_TOP)
-    pyosd.daemon.bot = apply(pyosd.osd, args, kwargs)
+    pyosd.daemon.bot = pyosd.osd(*args, **kwargs)
     pyosd.daemon.bot.set_pos(pyosd.POS_BOT)
 
     pyosd.daemon.top.set_outline_offset(1)
@@ -75,14 +75,14 @@
         for f in files:
             try:
                 namespace = {}
-                execfile(os.path.join(MODULES_DIR, f), namespace)
+                exec(compile(open(os.path.join(MODULES_DIR, f), "rb").read(), os.path.join(MODULES_DIR, f), 'exec'), namespace)
                 c = namespace['plugin']()
             except:
-                print "Unable to load module: %s" % f
+                print("Unable to load module: %s" % f)
                 error=1
 
             if not error:
-                print "Adding plugin: %s" % f
+                print("Adding plugin: %s" % f)
                 for k in c.plugin_keys:
                     modules[k] = c
 
@@ -97,15 +97,15 @@
             s = string.split(line)
 
             if not s:
-                print "Not s"
+                print("Not s")
                 return
 
             cmd = s[0]
 
-            if PyOSDServ.modules.has_key(cmd):
-                apply(getattr(PyOSDServ.modules[cmd], cmd), s[1:])
+            if cmd in PyOSDServ.modules:
+                getattr(PyOSDServ.modules[cmd], cmd)(*s[1:])
             else:
-                print "Unknown command: %s" % line
+                print("Unknown command: %s" % line)
 
 
     factory = Factory()
@@ -114,7 +114,7 @@
     pyosd.daemon.reactor = reactor
 
     if allinterfaces:
-        print "Binding to all interfaces.."
+        print("Binding to all interfaces..")
         reactor.listenTCP(8007, factory) #, interface='127.0.0.1')
     else:
         reactor.listenTCP(8007, factory, interface='127.0.0.1')
diff -Naur pyosd-0.2.14.orig/pyosd/__init__.py pyosd-0.2.14/pyosd/__init__.py
--- pyosd-0.2.14.orig/pyosd/__init__.py	2005-08-29 13:23:48.000000000 +0600
+++ pyosd-0.2.14/pyosd/__init__.py	2020-06-27 11:04:57.122707537 +0500
@@ -44,7 +44,7 @@
 
 error = _pyosd.error
 
-default_font="-*-helvetica-medium-r-normal-*-*-360-*-*-p-*-*-*"
+default_font="-*-*-medium-r-normal-*-*-360-*-*-*-*-*-*"
 
 class osd:
     """ osd is a class used to create an object which can display messages on
@@ -121,7 +121,7 @@
         """
 
         if line >= self.get_number_lines() or line < 0:
-            raise ValueError, "specified line is out of range"
+            raise ValueError("specified line is out of range")
 
         if type==TYPE_STRING:
             _pyosd.display_string(self._osd, line, arg)
@@ -133,7 +133,7 @@
             _pyosd.display_slider(self._osd, line, int(arg))
 
         else:
-            raise ValueError, "type not in list of valid values!"
+            raise ValueError("type not in list of valid values!")
 
     def set_font(self, font):
         """Change the font.
@@ -208,7 +208,7 @@
     def scroll(self, lines=1):
         """Scroll the display."""
         if lines >= self.get_number_lines() or lines < 0:
-            raise ValueError, "specified line is out of range"
+            raise ValueError("specified line is out of range")
         _pyosd.scroll(self._osd, lines)
 
     def hide(self):
diff -Naur pyosd-0.2.14.orig/_pyosd.c pyosd-0.2.14/_pyosd.c
--- pyosd-0.2.14.orig/_pyosd.c	2005-08-24 13:09:23.000000000 +0600
+++ pyosd-0.2.14/_pyosd.c	2020-06-27 10:55:00.010709815 +0500
@@ -74,20 +74,33 @@
     {NULL,  NULL}
 };
 
-void
-init_pyosd(void)
+static struct PyModuleDef cModPyOsd =
+{
+    PyModuleDef_HEAD_INIT,
+    "_pyosd", /* name of module */
+    "",       /* module documentation, may be NULL */
+    -1,       /* size of per-interpreter state of the module, or -1 if the module keeps state in global variables. */
+    pyosd_methods
+};
+
+//void
+//init_pyosd(void)
+PyMODINIT_FUNC
+PyInit__pyosd(void)
 {
   PyObject *self;
   PyObject *dict;
 
   // create the module and add the functions
-  self = Py_InitModule("_pyosd", pyosd_methods);
+  self = PyModule_Create(&cModPyOsd);
 
   // init custom exception
   dict = PyModule_GetDict(self);
 
   pyosd_error = PyErr_NewException("pyosd.error", NULL, NULL);
   PyDict_SetItemString(dict, "error", pyosd_error);
+
+  return self;
 }
 
 ////////////////////////////////////////////////////////////////////////
@@ -147,7 +160,7 @@
 
   // we've now got a osd reference, which we need to package up and return
   // to the surrounding python code
-  pyc_osd = PyCObject_FromVoidPtr((void *)osd, NULL);
+  pyc_osd = PyCapsule_New((void *)osd, "osd", NULL);
 
   return pyc_osd;
 }
@@ -161,7 +174,7 @@
   if(!PyArg_ParseTuple(args, "O", &pyc_osd))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(osd==NULL) {
     PyErr_SetString(pyosd_error, "Already deinitialised");
@@ -190,7 +203,7 @@
   if(!PyArg_ParseTuple(args, "Ois", &pyc_osd, &line, &str))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -214,7 +227,7 @@
   if(!PyArg_ParseTuple(args, "Oii", &pyc_osd, &line, &perc))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -237,7 +250,7 @@
   if(!PyArg_ParseTuple(args, "Oii", &pyc_osd, &line, &slider))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -259,7 +272,7 @@
   if(!PyArg_ParseTuple(args, "Os", &pyc_osd, &font))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -285,7 +298,7 @@
   if(!PyArg_ParseTuple(args, "Os", &pyc_osd, &colour))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -306,7 +319,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &timeout))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -329,7 +342,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &pos))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -363,7 +376,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &align))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -395,7 +408,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &bar_length))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -416,7 +429,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &offset))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -437,7 +450,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &offset))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -458,7 +471,7 @@
   if(!PyArg_ParseTuple(args, "Os", &pyc_osd, &colour))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -479,7 +492,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &offset))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -500,7 +513,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &offset))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -521,7 +534,7 @@
   if(!PyArg_ParseTuple(args, "Os", &pyc_osd, &colour))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -542,7 +555,7 @@
   if(!PyArg_ParseTuple(args, "Oi", &pyc_osd, &amount))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -562,7 +575,7 @@
   if(!PyArg_ParseTuple(args, "O", &pyc_osd))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -582,7 +595,7 @@
   if(!PyArg_ParseTuple(args, "O", &pyc_osd))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -602,7 +615,7 @@
   if(!PyArg_ParseTuple(args, "O", &pyc_osd))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -622,7 +635,7 @@
   if(!PyArg_ParseTuple(args, "O", &pyc_osd))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
@@ -640,7 +653,7 @@
   if(!PyArg_ParseTuple(args, "O", &pyc_osd))
     return NULL;
 
-  osd = (xosd *)PyCObject_AsVoidPtr(pyc_osd);
+  osd = (xosd *)PyCapsule_GetPointer(pyc_osd, "osd");
 
   if(!assert_osd(osd, "Run init() first!"))
     return NULL;
